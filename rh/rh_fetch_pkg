#!/usr/bin/python

import sys
import ssl
import json
import urllib2
from sgmllib import SGMLParser

prog_name = sys.argv[0]
prm_arch = "x86_64"
prm_suffix = ".rpm"
prm_suffix_len = len(prm_suffix)
url_template = "https://brewweb.devel.redhat.com/buildinfo?buildID=%(brew_id)s"
help_msg = """
usage: %(prog)s <brew_build_id>

Fetch packages from Brew with specific requirements:

Arch:   %(arch)s
Suffix: %(suffix)s
""" % {
    "prog": prog_name,
    "arch": prm_arch,
    "suffix": prm_suffix,
}

def usage ():
    print help_msg
    sys.exit(1)

def url_get (url):
    gcontext = ssl.SSLContext(ssl.PROTOCOL_TLSv1)
    sock = urllib2.urlopen(url, context=gcontext)
    html = sock.read()
    sock.close()
    return html

def url_download (url):
    fname = url[url.rfind("/") + 1:]
    print "Downloading file %s" % url
    sock_in = urllib2.urlopen(url)
    out = open(fname, "wb")
    out.write(sock_in.read())
    sock_in.close()
    out.close()
    print "File %s downloaded" % fname

class PkgUrlParser (SGMLParser):
    def reset (self):
        SGMLParser.reset(self)
        self.urls = []

    def start_a (self, attrs):
        href = [v for k, v in attrs if k == 'href' \
                and v[0:4] == "http"] 
        self.urls.extend(href)

def brew_fetch_urls (brew_id):
    global prm_suffix, prm_suffix_len, prm_arch
    parser = PkgUrlParser()
    url = url_template % {"brew_id": brew_id}
    print "Parsing brew link: %s" % url
    parser.feed(url_get(url))
    # only keep ARCH specific packages
    urls = filter(lambda x: x.find(prm_arch) != -1, parser.urls)
    # only keep RPM links rather than else
    return filter(lambda x: x[-prm_suffix_len:] == prm_suffix, urls)
    
if len(sys.argv) != 2:
    usage()

brew_id = sys.argv[1]
if not brew_id.isdigit():
    print "Brew ID incorrect: %s" % brew_id
    usage()

count = 0
urls = brew_fetch_urls(brew_id)
for url in urls:
    url_download(url)
    count += 1
print "Totally %s file downloaded" % count
